Creation of database:
	-CREATE database procrastinators;
	-USE procrastinators

Creation of tables:

Product Table:
CREATE TABLE Product (
    ProductID INT AUTO_INCREMENT PRIMARY KEY,
    ProductName VARCHAR(100) NOT NULL,
    Brand VARCHAR(30),
    Description TEXT,
    ImageURL VARCHAR(255)
);

Category Table:
CREATE TABLE Category (
    CategoryID INT AUTO_INCREMENT PRIMARY KEY,
    CategoryName VARCHAR(30) NOT NULL UNIQUE
);

Product-Category Table:
CREATE TABLE ProductCategory (
    ProductID INT,
    CategoryID INT,
    PRIMARY KEY (ProductID, CategoryID),
    FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (CategoryID) REFERENCES Category(CategoryID)
        ON DELETE CASCADE ON UPDATE CASCADE
);

User Table:
CREATE TABLE User (
    UserID INT AUTO_INCREMENT PRIMARY KEY,
    UserName VARCHAR(100) NOT NULL,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Password VARCHAR(255) NOT NULL,
    Role ENUM('customer', 'admin', 'retailer') DEFAULT 'customer'
);

Review Table:
CREATE TABLE Review (
    ReviewID INT AUTO_INCREMENT PRIMARY KEY,
    ProductID INT NOT NULL,
    UserID INT,
    Date DATE NOT NULL,
    Rating INT CHECK (Rating BETWEEN 1 AND 5),
    Comment TEXT,
    FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (UserID) REFERENCES User(UserID)
        ON DELETE SET NULL ON UPDATE CASCADE
);

//UserID in review can be null, such that even if a user is deleted the review still remains

Retailer Table:
CREATE TABLE Retailer (
    RetailerID INT AUTO_INCREMENT PRIMARY KEY,
    RetailerName VARCHAR(100) NOT NULL,
    Country VARCHAR(50),
    RetailerURL VARCHAR(255)
);

Listing Table:
CREATE TABLE Listing (
    ListingID INT AUTO_INCREMENT PRIMARY KEY,
    ProductID INT NOT NULL,
    RetailerID INT NOT NULL,
    Date DATE NOT NULL,
    Price DECIMAL(10,2) CHECK (Price >= 0),
    Quantity INT CHECK (Quantity >= 0),
    FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (RetailerID) REFERENCES Retailer(RetailerID)
        ON DELETE CASCADE ON UPDATE CASCADE
);